import UIKit
import RxSwift
import RxCocoa

// MARK: Subject ho·∫°t ƒë·ªông nh∆∞ v·ª´a l√† m·ªôt Observable, v·ª´a l√† m·ªôt Observer. Khi m·ªôt Subject nh·∫≠n m·ªôt .next event th√¨ ngay l·∫≠p t·ª©c n√≥ s·∫Ω ph√°t ra c√°c emit cho c√°c subscriber c·ªßa n√≥.
//----------------------------------------------------------------------
// MARK:PublishSubject: Kh·ªüi ƒë·∫ßu empty v√† ch·ªâ emit c√°c element m·ªõi cho Subscriber c·ªßa n√≥.

// MARK:BehaviorSubject: Kh·ªüi ƒë·∫ßu v·ªõi m·ªôt gi√° tr·ªã kh·ªüi t·∫°o v√† s·∫Ω relay l·∫°i element cu·ªëi c√πng c·ªßa chu·ªói cho Subscriber m·ªõi.

// MARK:ReplaySubject: Kh·ªüi t·∫°o v·ªõi m·ªôt k√≠ch th∆∞·ªõc b·ªô ƒë·ªám c·ªë ƒë·ªãnh, sau ƒë√≥ s·∫Ω l∆∞u tr·ªØ c√°c element g·∫ßn nh·∫•t v√†o b·ªô ƒë·ªám n√†y v√† relay l·∫°i c√°c element ch·ª©a trong b·ªô ƒë·ªám cho m·ªôt Subscriber m·ªõi.

// MARK:AsyncSubject: Ch·ªâ ph√°t ra s·ª± ki·ªán .next cu·ªëi c√πng trong chu·ªói v√† ch·ªâ khi subject nh·∫≠n ƒë∆∞·ª£c .completed. C√°i n√†y √≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng, n√™n ch·∫Øc skip v√† h·∫πn ·ªü m·ªôt th·ªùi gian sau.

// MARK: PublishRelay & BehaviorRelay : l√† c√°c subject ƒë∆∞·ª£c b·ªçc l·∫°i (wrap), nh∆∞ng ch√∫ng ch·ªâ ch·∫•p nh·∫≠n .next. B·∫°n kh√¥ng th·ªÉ th√™m c√°c .error hay .completed. V√¨ v·∫≠y ch√∫ng th√≠ch h·ª£p cho c√°c s·ª± ki·ªán kh√¥ng bao gi·ªù k·∫øt th√∫c.

let subject = PublishSubject<String>()
//subject.onNext("Hello ae")
//let subscroption1 = subject
//    .subscribe(onNext: { value in

//        print(value)
//    })
//subject.onNext("Hello l·∫ßn n·ªØa")
//subject.onNext("Hello l·∫ßn th·ª© 3")
//subject.onNext("M√¨nh ƒë·ª©ng ƒë√¢y t·ª´ h√¥m qua")
//
let subscriptionOne = subject
    .subscribe(onNext : { string in
        print(string)
    })
subject.onNext("1")
subject.onNext("2")

let subscriptionTwo = subject
    .subscribe { event in
        print("2)" , event.element ?? event)
    }
subject.onNext("3") ///  s·ªë "3" ƒë∆∞·ª£c in 2 l·∫ßn ,  1 l·∫ßn cho subscriptionOne v√† 1 l·∫ßn cho subscriptionTwo
subscriptionOne.dispose()
subject.onNext("4") /// s·ªë 4  ch·ªâ ƒë∆∞·ª£c in cho subscription 2) , v√¨ subscriptionOne ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (dispose)


// Behavior Subject
let subject2 = BehaviorSubject(value: "0")
 let disposeBag = DisposeBag()

enum MyError : Error {
    case anError
}
subject2.subscribe {
    print("üîµ " , $0) ///ki·ªÉm tra th·ª≠ vi·ªác ch√∫ng ta c√≥ nh·∫≠n ƒë∆∞·ª£c gi√° tr·ªã ban ƒë·∫ßu khi c·∫•p cho Behavior Subject kh√¥ng
}.disposed(by: disposeBag)

subject2.onNext("1")
//
subject2.subscribe{
    print("üî¥ " , $0) /// subscriber th·ª© 2 nh·∫≠n ƒë∆∞·ª£c gi√° tr·ªã 1. Do l√∫c n√†y 1 l√† m·ªõi nh·∫•t.
}.disposed(by: disposeBag)

///k·∫øt th√∫c subject v·ªõi 1 .error.
subject2.onError(MyError.anError)
subject2.subscribe{
    print("üü† " , $0)
}.disposed(by: disposeBag)
///2 subscriber tr∆∞·ªõc ƒë√≥ s·∫Ω nh·∫≠n .error v√† subscriber m·ªõi s·∫Ω nh·∫≠n ƒë∆∞·ª£c error


